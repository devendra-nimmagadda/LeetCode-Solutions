class Solution {
    public int[] sortArray(int[] nums) {
		if(nums.length == 1)
			return nums;
		else if(nums.length == 2)
		{
			if(nums[0] > nums[1])
				swap(nums, 0,1);
			return nums;
		}
		else
		{
			sort(nums, 0, nums.length-1);
		}		
		return nums;
    }
	
	private void sort(int[] nums, int begin, int end)
	{
		if(begin < end)
		{
			int p = partition(nums, begin, end);
			sort(nums, begin, p-1);
			sort(nums, p+1, end);
		}
	}
	private int partition(int[] nums, int begin, int end)
	{
		int pivot = nums[begin];
		int low = begin+1;
		int high = end;
		while(low <= high)
		{
			while(low<=high && nums[low] <= pivot)
				low++;
			while(low<=high && nums[high] >= pivot)
				high--;
			if(low < high)
				swap(nums, low, high);
		}
		if(low > high)
			swap(nums, begin, high);
		return high;
	}
	private void swap(int[] nums, int x, int y)
	{
		int t = nums[x];
		nums[x] = nums[y];
		nums[y] = t;
	}
}
