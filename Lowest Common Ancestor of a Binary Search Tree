/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || p == null || q == null)
            return null;
        if(root.val == p.val && root.val == q.val)
            return root;
        List<TreeNode> pNodes = new ArrayList<>();
        List<TreeNode> qNodes = new ArrayList<>();
        findNodes(root, p, pNodes);
        findNodes(root, q, qNodes);
        if(pNodes.size() == 0 || qNodes.size() == 0)
            return null;
        if(pNodes.size() < qNodes.size())
            return findCommon(pNodes, qNodes);
        else
            return findCommon(qNodes, pNodes);
    }
    
    void findNodes(TreeNode root, TreeNode node, List<TreeNode> nodes)
    {
        if(root == null)
            return;
        nodes.add(root);
        if(root.val == node.val)
            return;
        if(node.val < root.val)
            findNodes(root.left, node, nodes);
        else
            findNodes(root.right, node, nodes);
    }
    
    TreeNode findCommon(List<TreeNode> x, List<TreeNode> y)
    {

        TreeNode node = null;
        
        for(TreeNode p:x)
        {
            for(TreeNode q:y)
            {
                if(p.val == q.val)
                {
                    node = p;
                    break;
                }
            }
        }
        return node;
    }
}
