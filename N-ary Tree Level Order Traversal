/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> list = new ArrayList<>();  
        if(root == null)
            return list;              
        List<Node> queue = new ArrayList<>();
        queue.add(root);
        while(!queue.isEmpty())
        {
            List<Integer> children = new ArrayList<>();
            List<Node> nQueue = new ArrayList<>();
            for(Node temp:queue)
            {  
                if(temp != null)
                    children.add(temp.val);
                nQueue.addAll(temp.children);
            }
            if(!children.isEmpty())                
                list.add(children);            
            queue = nQueue;
        }
        return list;
    }
}
